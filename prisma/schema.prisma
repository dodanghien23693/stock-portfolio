// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  portfolios    Portfolio[]
  backtests     Backtest[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Stock {
  id            String   @id @default(cuid())
  symbol        String   @unique // VD: VNM, VCB, HPG
  name          String   // Tên công ty
  exchange      String?  // HOSE, HNX, UPCOM
  sector        String?  // Ngành
  industry      String?  // Lĩnh vực
  marketCap     Float?   // Vốn hóa thị trường
  listedShares  Float?   // Số cổ phiếu niêm yết
  
  // Current price data
  currentPrice  Float?   // Giá hiện tại
  changeValue   Float?   // Thay đổi giá trị
  changePercent Float?   // % thay đổi
  volume        Int?     // Khối lượng giao dịch
  high          Float?   // Giá cao nhất trong ngày
  low           Float?   // Giá thấp nhất trong ngày
  open          Float?   // Giá mở cửa
  close         Float?   // Giá đóng cửa
  tradingDate   String?  // Ngày giao dịch
  
  // Financial ratios
  eps           Float?   // Earnings per share
  pe            Float?   // Price to earnings ratio
  pb            Float?   // Price to book ratio
  roe           Float?   // Return on equity
  roa           Float?   // Return on assets
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  portfolioStocks PortfolioStock[]
  backtestTrades BacktestTrade[]
  news          News[]
  events        Event[]
}

model StockHistory {
  id        String   @id @default(cuid())
  symbol    String   // Symbol instead of stockId for direct reference
  date      String   // Date as string (YYYY-MM-DD)
  open      Float
  high      Float
  low       Float
  close     Float
  volume    Int
  value     Float    // Giá trị giao dịch
  createdAt DateTime @default(now())
  
  @@unique([symbol, date])
  @@index([symbol, date])
}

model Portfolio {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  stocks      PortfolioStock[]
}

model PortfolioStock {
  id          String   @id @default(cuid())
  portfolioId String
  stockId     String
  quantity    Int      @default(0)
  avgPrice    Float?   // Giá trung bình
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  stock       Stock     @relation(fields: [stockId], references: [id], onDelete: Cascade)
  
  @@unique([portfolioId, stockId])
}

model Backtest {
  id            String   @id @default(cuid())
  userId        String
  name          String
  description   String?
  startDate     DateTime
  endDate       DateTime
  initialCash   Float
  finalCash     Float?
  totalReturn   Float?
  maxDrawdown   Float?
  sharpeRatio   Float?
  winRate       Float?
  status        String   @default("pending") // pending, running, completed, failed
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  trades        BacktestTrade[]
}

model BacktestTrade {
  id         String   @id @default(cuid())
  backtestId String
  stockId    String
  type       String   // BUY, SELL
  quantity   Int
  price      Float
  date       DateTime
  commission Float    @default(0)
  
  backtest   Backtest @relation(fields: [backtestId], references: [id], onDelete: Cascade)
  stock      Stock    @relation(fields: [stockId], references: [id], onDelete: Cascade)
  
  @@index([backtestId, date])
}

model News {
  id          String   @id @default(cuid())
  stockId     String?
  title       String
  content     String?  @db.Text
  summary     String?
  url         String?
  source      String?
  publishedAt DateTime
  createdAt   DateTime @default(now())
  
  stock       Stock?   @relation(fields: [stockId], references: [id])
  
  @@index([stockId, publishedAt])
}

model Event {
  id          String   @id @default(cuid())
  stockId     String
  type        String   // EARNINGS, DIVIDEND, AGM, etc.
  title       String
  description String?
  eventDate   DateTime
  createdAt   DateTime @default(now())
  
  stock       Stock    @relation(fields: [stockId], references: [id], onDelete: Cascade)
  
  @@index([stockId, eventDate])
}
